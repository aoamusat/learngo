// Code generated by goa v3.16.1, DO NOT EDIT.
//
// calc HTTP server encoders and decoders
//
// Command:
// $ goa gen learngo.io/calc/design

package server

import (
	"context"
	"net/http"
	"strconv"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeMultiplyResponse returns an encoder for responses returned by the calc
// multiply endpoint.
func EncodeMultiplyResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(int64)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeMultiplyRequest returns a decoder for requests sent to the calc
// multiply endpoint.
func DecodeMultiplyRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			a   int64
			b   int64
			err error

			params = mux.Vars(r)
		)
		{
			aRaw := params["a"]
			v, err2 := strconv.ParseInt(aRaw, 10, 64)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("a", aRaw, "integer"))
			}
			a = v
		}
		{
			bRaw := params["b"]
			v, err2 := strconv.ParseInt(bRaw, 10, 64)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("b", bRaw, "integer"))
			}
			b = v
		}
		if err != nil {
			return nil, err
		}
		payload := NewMultiplyPayload(a, b)

		return payload, nil
	}
}
