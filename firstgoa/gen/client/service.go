// Code generated by goa v3.16.1, DO NOT EDIT.
//
// client service
//
// Command:
// $ goa gen learngo.io/firstgoa/design

package client

import (
	"context"

	"goa.design/goa/v3/security"
	clientviews "learngo.io/firstgoa/gen/client/views"
)

// The Client service allows access to client members
type Service interface {
	// Add implements add.
	Add(context.Context, *AddPayload) (err error)
	// Get implements get.
	Get(context.Context, *GetPayload) (res *ClientManagement, err error)
	// Show implements show.
	Show(context.Context, *ShowPayload) (res ClientManagementCollection, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "clients"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "client"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"add", "get", "show"}

// AddPayload is the payload type of the client service add method.
type AddPayload struct {
	// JWT used for authentication
	Token string
	// Client ID
	ClientID string
	// Client ID
	ClientName string
	// Contact Name
	ContactName string
	// Contact Email
	ContactEmail string
	// Contact Mobile Number
	ContactMobile int
}

// ClientManagement is the result type of the client service get method.
type ClientManagement struct {
	// ID is the unique id of the Client.
	ClientID string
	// Name of the Client
	ClientName string
	// Name of the Contact.
	ContactName string
	// Email of the Client Contact
	ContactEmail string
	// Mobile number of the Client Contact
	ContactMobile int
}

// ClientManagementCollection is the result type of the client service show
// method.
type ClientManagementCollection []*ClientManagement

// GetPayload is the payload type of the client service get method.
type GetPayload struct {
	// JWT used for authentication
	Token string
	// Client ID
	ClientID string
}

// NotFound is the type returned when the requested data that does not exist.
type NotFound struct {
	// Message of error
	Message string
	// ID of missing data
	ID string
}

// ShowPayload is the payload type of the client service show method.
type ShowPayload struct {
	// JWT used for authentication
	Token string
}

// Token scopes are invalid
type InvalidScopes string

// Credentials are invalid
type Unauthorized string

// Error returns an error description.
func (e *NotFound) Error() string {
	return "NotFound is the type returned when the requested data that does not exist."
}

// ErrorName returns "NotFound".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "NotFound".
func (e *NotFound) GoaErrorName() string {
	return "not_found"
}

// Error returns an error description.
func (e InvalidScopes) Error() string {
	return "Token scopes are invalid"
}

// ErrorName returns "invalid-scopes".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InvalidScopes) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "invalid-scopes".
func (e InvalidScopes) GoaErrorName() string {
	return "invalid-scopes"
}

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Credentials are invalid"
}

// ErrorName returns "unauthorized".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Unauthorized) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unauthorized".
func (e Unauthorized) GoaErrorName() string {
	return "unauthorized"
}

// NewClientManagement initializes result type ClientManagement from viewed
// result type ClientManagement.
func NewClientManagement(vres *clientviews.ClientManagement) *ClientManagement {
	return newClientManagement(vres.Projected)
}

// NewViewedClientManagement initializes viewed result type ClientManagement
// from result type ClientManagement using the given view.
func NewViewedClientManagement(res *ClientManagement, view string) *clientviews.ClientManagement {
	p := newClientManagementView(res)
	return &clientviews.ClientManagement{Projected: p, View: "default"}
}

// NewClientManagementCollection initializes result type
// ClientManagementCollection from viewed result type
// ClientManagementCollection.
func NewClientManagementCollection(vres clientviews.ClientManagementCollection) ClientManagementCollection {
	return newClientManagementCollection(vres.Projected)
}

// NewViewedClientManagementCollection initializes viewed result type
// ClientManagementCollection from result type ClientManagementCollection using
// the given view.
func NewViewedClientManagementCollection(res ClientManagementCollection, view string) clientviews.ClientManagementCollection {
	p := newClientManagementCollectionView(res)
	return clientviews.ClientManagementCollection{Projected: p, View: "default"}
}

// newClientManagement converts projected type ClientManagement to service type
// ClientManagement.
func newClientManagement(vres *clientviews.ClientManagementView) *ClientManagement {
	res := &ClientManagement{}
	if vres.ClientID != nil {
		res.ClientID = *vres.ClientID
	}
	if vres.ClientName != nil {
		res.ClientName = *vres.ClientName
	}
	if vres.ContactName != nil {
		res.ContactName = *vres.ContactName
	}
	if vres.ContactEmail != nil {
		res.ContactEmail = *vres.ContactEmail
	}
	if vres.ContactMobile != nil {
		res.ContactMobile = *vres.ContactMobile
	}
	return res
}

// newClientManagementView projects result type ClientManagement to projected
// type ClientManagementView using the "default" view.
func newClientManagementView(res *ClientManagement) *clientviews.ClientManagementView {
	vres := &clientviews.ClientManagementView{
		ClientID:      &res.ClientID,
		ClientName:    &res.ClientName,
		ContactName:   &res.ContactName,
		ContactEmail:  &res.ContactEmail,
		ContactMobile: &res.ContactMobile,
	}
	return vres
}

// newClientManagementCollection converts projected type
// ClientManagementCollection to service type ClientManagementCollection.
func newClientManagementCollection(vres clientviews.ClientManagementCollectionView) ClientManagementCollection {
	res := make(ClientManagementCollection, len(vres))
	for i, n := range vres {
		res[i] = newClientManagement(n)
	}
	return res
}

// newClientManagementCollectionView projects result type
// ClientManagementCollection to projected type ClientManagementCollectionView
// using the "default" view.
func newClientManagementCollectionView(res ClientManagementCollection) clientviews.ClientManagementCollectionView {
	vres := make(clientviews.ClientManagementCollectionView, len(res))
	for i, n := range res {
		vres[i] = newClientManagementView(n)
	}
	return vres
}
