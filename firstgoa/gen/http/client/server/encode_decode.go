// Code generated by goa v3.16.1, DO NOT EDIT.
//
// client HTTP server encoders and decoders
//
// Command:
// $ goa gen learngo.io/firstgoa/design

package server

import (
	"context"
	"io"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	clientviews "learngo.io/firstgoa/gen/client/views"
)

// EncodeAddResponse returns an encoder for responses returned by the client
// add endpoint.
func EncodeAddResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusCreated)
		return nil
	}
}

// DecodeAddRequest returns a decoder for requests sent to the client add
// endpoint.
func DecodeAddRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body AddRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateAddRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			clientID string

			params = mux.Vars(r)
		)
		clientID = params["ClientID"]
		payload := NewAddPayload(&body, clientID)

		return payload, nil
	}
}

// EncodeGetResponse returns an encoder for responses returned by the client
// get endpoint.
func EncodeGetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*clientviews.ClientManagement)
		enc := encoder(ctx, w)
		body := NewGetResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetRequest returns a decoder for requests sent to the client get
// endpoint.
func DecodeGetRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			clientID string

			params = mux.Vars(r)
		)
		clientID = params["ClientID"]
		payload := NewGetPayload(clientID)

		return payload, nil
	}
}

// EncodeShowResponse returns an encoder for responses returned by the client
// show endpoint.
func EncodeShowResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(clientviews.ClientManagementCollection)
		enc := encoder(ctx, w)
		body := NewClientManagementResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// marshalClientviewsClientManagementViewToClientManagementResponse builds a
// value of type *ClientManagementResponse from a value of type
// *clientviews.ClientManagementView.
func marshalClientviewsClientManagementViewToClientManagementResponse(v *clientviews.ClientManagementView) *ClientManagementResponse {
	res := &ClientManagementResponse{
		ClientID:   *v.ClientID,
		ClientName: *v.ClientName,
	}

	return res
}
