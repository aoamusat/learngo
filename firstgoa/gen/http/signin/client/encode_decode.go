// Code generated by goa v3.16.1, DO NOT EDIT.
//
// signin HTTP client encoders and decoders
//
// Command:
// $ goa gen learngo.io/firstgoa/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
	signin "learngo.io/firstgoa/gen/signin"
)

// BuildAuthenticateRequest instantiates a HTTP request object with method and
// path set to call the "signin" service "authenticate" endpoint
func (c *Client) BuildAuthenticateRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AuthenticateSigninPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("signin", "authenticate", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAuthenticateRequest returns an encoder for requests sent to the signin
// authenticate server.
func EncodeAuthenticateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*signin.AuthenticatePayload)
		if !ok {
			return goahttp.ErrInvalidType("signin", "authenticate", "*signin.AuthenticatePayload", v)
		}
		req.SetBasicAuth(p.Username, p.Password)
		return nil
	}
}

// DecodeAuthenticateResponse returns a decoder for responses returned by the
// signin authenticate endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeAuthenticateResponse may return the following errors:
//   - "unauthorized" (type signin.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeAuthenticateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AuthenticateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("signin", "authenticate", err)
			}
			err = ValidateAuthenticateResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("signin", "authenticate", err)
			}
			res := NewAuthenticateCredsOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("signin", "authenticate", err)
			}
			return nil, NewAuthenticateUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("signin", "authenticate", resp.StatusCode, string(body))
		}
	}
}
